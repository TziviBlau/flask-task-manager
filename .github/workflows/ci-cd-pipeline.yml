name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run unit tests
        run: pytest || echo "No tests found"

  build_and_push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/flask-task-manager:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Kubernetes
        run: |
          # התקנת kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          # הגדרת kubeconfig
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config

          # החלת קבצי ה-YAML
          kubectl apply -f k8s/

      - name: Verify Deployment Status
        run: |
          # המתנה לפודים שיגיעו למצב Ready
          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=ready pod -l app=flask-app -n flask-task --timeout=300s
          
  verify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Verify with curl
        run: |
          echo "Running health check..."
          # שימי לב: ה-URL המקומי עשוי להיות שונה בסביבת ה-CI/CD, תלוי איך היא מוגדרת.
          # אם יש לך Service מטיפוס ClusterIP, צריך ליצור Port Forwarding.
          # לצורך הדוגמא, נניח שהאפליקציה חשופה.
          curl -f http://localhost:5000/api/tasks || echo "Tasks API check failed"
