name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: my-flask-task-manager
      REGISTRY: ghcr.io/${{ github.repository }}
      VERSION: 1.0.${{ github.run_number }}

    steps:
      # ====================
      # Stage 1: Validation
      # ====================
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate dependencies and files
        run: |
          python3 -m pip install flask mysql-connector-python
          python3 -c "import flask; print('✓ Flask import successful')"
          python3 -c "import mysql.connector; print('✓ MySQL connector import successful')"
          test -f Dockerfile && echo "✓ Dockerfile exists"
          test -f requirements.txt && echo "✓ requirements.txt exists"
          test -f src/app.py && echo "✓ app.py exists"

      # ====================
      # Stage 2: Build + Single Container Tests
      # ====================
      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:${{ env.VERSION }} -t $IMAGE_NAME:latest .

      - name: Run single container
        run: docker run -d -p 5000:5000 --name test-app $IMAGE_NAME:${{ env.VERSION }}

      - name: Wait for app startup
        run: sleep 15

      - name: Test endpoints
        run: |
          curl -f http://localhost:5000/ && echo "✓ Main endpoint works"
          curl -f http://localhost:5000/health && echo "✓ Health endpoint works"

          # ---- CRUD API ----
          curl -X POST -H "Content-Type: application/json" \
            -d '{"title":"Test Task"}' \
            http://localhost:5000/api/tasks && echo "✓ POST works"

          curl -s http://localhost:5000/api/tasks | grep "Test Task" && echo "✓ GET works"

          curl -X PUT -H "Content-Type: application/json" \
            -d '{"title":"Updated Task","completed":true}' \
            http://localhost:5000/api/tasks/1 && echo "✓ PUT works"

          curl -X DELETE http://localhost:5000/api/tasks/1 && echo "✓ DELETE works"

      - name: Cleanup container
        run: docker stop test-app && docker rm test-app

      # ====================
      # Stage 3: Docker Compose (3-tier stack)
      # ====================
      - name: Start 3-tier stack
        run: |
          cd docker-compose
          docker-compose up -d
          sleep 90

      - name: Test 3-tier stack
        run: |
          curl -f http://localhost:8080/ && echo "✓ Nginx proxy works"
          curl -f http://localhost:8080/health && echo "✓ Health through nginx works"
          curl -s http://localhost:8080/health | grep "Database: Healthy" && echo "✓ Database connectivity works"

          # ---- CRUD API via nginx ----
          curl -X POST -H "Content-Type: application/json" \
            -d '{"title":"Proxy Task"}' \
            http://localhost:8080/api/tasks && echo "✓ POST works"

          curl -s http://localhost:8080/api/tasks | grep "Proxy Task" && echo "✓ GET works"

          curl -X PUT -H "Content-Type: application/json" \
            -d '{"title":"Updated Proxy Task","completed":true}' \
            http://localhost:8080/api/tasks/1 && echo "✓ PUT works"

          curl -X DELETE http://localhost:8080/api/tasks/1 && echo "✓ DELETE works"

      - name: Cleanup 3-tier stack
        run: |
          cd docker-compose
          docker-compose down -v

      # ====================
      # Stage 4: Publish Image
      # ====================
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag $IMAGE_NAME:${{ env.VERSION }} $REGISTRY:${{ env.VERSION }}
          docker tag $IMAGE_NAME:${{ env.VERSION }} $REGISTRY:latest
          docker push $REGISTRY:${{ env.VERSION }}
          docker push $REGISTRY:latest

      # ====================
      # Stage 5: Kubernetes Tests (kind cluster)
      # ====================
      - name: Create kind cluster
        uses: helm/kind-action@v1

      - name: Deploy MySQL StatefulSet
        run: |
          kubectl apply -f k8s/mysql-secret.yaml
          kubectl apply -f k8s/mysql-statefulset.yaml
          kubectl apply -f k8s/mysql-service.yaml
          kubectl wait --for=condition=ready pod/mysql-0 --timeout=600s

      - name: Deploy Application
        run: |
          kubectl apply -f k8s/app-configmap.yaml
          kubectl apply -f k8s/app-deployment.yaml
          kubectl apply -f k8s/app-service.yaml
          kubectl wait --for=condition=available deployment/my-app --timeout=600s

      - name: Test Application on Kubernetes
        run: |
          kubectl port-forward deployment/my-app 5000:5000 &
          FORWARD_PID=$!
          sleep 20
          curl -f http://localhost:5000/ && echo "✓ Kubernetes app works"
          curl -f http://localhost:5000/health && echo "✓ Kubernetes health works"
          curl -s http://localhost:5000/health | grep "Database: Healthy" && echo "✓ Kubernetes database works"

          # ---- CRUD API ----
          curl -X POST -H "Content-Type: application/json" \
            -d '{"title":"Persist Task"}' \
            http://localhost:5000/api/tasks && echo "✓ POST works"

          curl -s http://localhost:5000/api/tasks | grep "Persist Task" && echo "✓ GET works"

          # בדיקת התמדה - מוחקים את ה־pod של MySQL
          kubectl delete pod mysql-0
          kubectl wait --for=condition=ready pod/mysql-0 --timeout=300s

          curl -s http://localhost:5000/api/tasks | grep "Persist Task" && echo "✓ Persistence works"
          kill $FORWARD_PID

      # ====================
      # Stage 6: Manual Deployment Instructions
      # ====================
      - name: Manual Deployment Instructions
        run: |
          echo "1. הפעל Killercoda Kubernetes session"
          echo "2. הפעל: kubectl apply -f k8s/"
          echo "3. בדוק עם: kubectl get pods, kubectl get svc"
          echo "4. בצע port-forward ל־my-app ובדוק curl / curl /api"
